{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/extends\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/firaschikhaoui/Desktop/react-native-hangman/node_modules/react-navigation/src/navigators/DrawerNavigator.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport SafeAreaView from 'react-native-safe-area-view';\nimport createNavigator from \"./createNavigator\";\nimport createNavigationContainer from \"../createNavigationContainer\";\nimport tabRouter from \"../routers/TabRouter\";\nimport DrawerScreen from \"../views/Drawer/DrawerScreen\";\nimport DrawerView from \"../views/Drawer/DrawerView\";\nimport DrawerItems from \"../views/Drawer/DrawerNavigatorItems\";\n\nvar defaultContentComponent = function defaultContentComponent(props) {\n  return React.createElement(ScrollView, {\n    alwaysBounceVertical: false,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 3\n    }\n  }, React.createElement(SafeAreaView, {\n    forceInset: {\n      top: 'always',\n      horizontal: 'never'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 5\n    }\n  }, React.createElement(DrawerItems, _extends({}, props, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }\n  }))));\n};\n\nvar DefaultDrawerConfig = {\n  drawerWidth: function drawerWidth() {\n    var _Dimensions$get = Dimensions.get('window'),\n        height = _Dimensions$get.height,\n        width = _Dimensions$get.width;\n\n    var smallerAxisSize = Math.min(height, width);\n    var isLandscape = width > height;\n    var isTablet = smallerAxisSize >= 600;\n    var appBarHeight = Platform.OS === 'ios' ? isLandscape ? 32 : 44 : 56;\n    var maxWidth = isTablet ? 320 : 280;\n    return Math.min(smallerAxisSize - appBarHeight, maxWidth);\n  },\n  contentComponent: defaultContentComponent,\n  drawerOpenRoute: 'DrawerOpen',\n  drawerCloseRoute: 'DrawerClose',\n  drawerToggleRoute: 'DrawerToggle',\n  drawerPosition: 'left',\n  drawerBackgroundColor: 'white',\n  useNativeAnimations: true\n};\n\nvar DrawerNavigator = function DrawerNavigator(routeConfigs) {\n  var _tabRouter;\n\n  var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  var mergedConfig = _objectSpread(_objectSpread({}, DefaultDrawerConfig), config);\n\n  var containerConfig = mergedConfig.containerConfig,\n      drawerWidth = mergedConfig.drawerWidth,\n      drawerLockMode = mergedConfig.drawerLockMode,\n      contentComponent = mergedConfig.contentComponent,\n      contentOptions = mergedConfig.contentOptions,\n      drawerPosition = mergedConfig.drawerPosition,\n      useNativeAnimations = mergedConfig.useNativeAnimations,\n      drawerBackgroundColor = mergedConfig.drawerBackgroundColor,\n      drawerOpenRoute = mergedConfig.drawerOpenRoute,\n      drawerCloseRoute = mergedConfig.drawerCloseRoute,\n      drawerToggleRoute = mergedConfig.drawerToggleRoute,\n      tabsConfig = _objectWithoutProperties(mergedConfig, [\"containerConfig\", \"drawerWidth\", \"drawerLockMode\", \"contentComponent\", \"contentOptions\", \"drawerPosition\", \"useNativeAnimations\", \"drawerBackgroundColor\", \"drawerOpenRoute\", \"drawerCloseRoute\", \"drawerToggleRoute\"]);\n\n  var contentRouter = tabRouter(routeConfigs, tabsConfig);\n  var drawerRouter = tabRouter((_tabRouter = {}, _defineProperty(_tabRouter, drawerCloseRoute, {\n    screen: createNavigator(contentRouter, routeConfigs, config)(function (props) {\n      return React.createElement(DrawerScreen, _extends({}, props, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }\n      }));\n    })\n  }), _defineProperty(_tabRouter, drawerOpenRoute, {\n    screen: function screen() {\n      return null;\n    }\n  }), _defineProperty(_tabRouter, drawerToggleRoute, {\n    screen: function screen() {\n      return null;\n    }\n  }), _tabRouter), {\n    initialRouteName: drawerCloseRoute\n  });\n  var navigator = createNavigator(drawerRouter, routeConfigs, config)(function (props) {\n    return React.createElement(DrawerView, _extends({}, props, {\n      drawerBackgroundColor: drawerBackgroundColor,\n      drawerLockMode: drawerLockMode,\n      useNativeAnimations: useNativeAnimations,\n      drawerWidth: drawerWidth,\n      contentComponent: contentComponent,\n      contentOptions: contentOptions,\n      drawerPosition: drawerPosition,\n      drawerOpenRoute: drawerOpenRoute,\n      drawerCloseRoute: drawerCloseRoute,\n      drawerToggleRoute: drawerToggleRoute,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 7\n      }\n    }));\n  });\n  return createNavigationContainer(navigator);\n};\n\nexport default DrawerNavigator;","map":{"version":3,"sources":["/Users/firaschikhaoui/Desktop/react-native-hangman/node_modules/react-navigation/src/navigators/DrawerNavigator.js"],"names":["React","SafeAreaView","createNavigator","createNavigationContainer","tabRouter","DrawerScreen","DrawerView","DrawerItems","defaultContentComponent","props","top","horizontal","DefaultDrawerConfig","drawerWidth","Dimensions","get","height","width","smallerAxisSize","Math","min","isLandscape","isTablet","appBarHeight","Platform","OS","maxWidth","contentComponent","drawerOpenRoute","drawerCloseRoute","drawerToggleRoute","drawerPosition","drawerBackgroundColor","useNativeAnimations","DrawerNavigator","routeConfigs","config","mergedConfig","containerConfig","drawerLockMode","contentOptions","tabsConfig","contentRouter","drawerRouter","screen","initialRouteName","navigator"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Dimensions, Platform, ScrollView } from 'react-native';\nimport SafeAreaView from 'react-native-safe-area-view';\n\nimport createNavigator from './createNavigator';\nimport createNavigationContainer from '../createNavigationContainer';\nimport tabRouter from '../routers/TabRouter';\nimport DrawerScreen from '../views/Drawer/DrawerScreen';\nimport DrawerView from '../views/Drawer/DrawerView';\nimport DrawerItems from '../views/Drawer/DrawerNavigatorItems';\n\n// A stack navigators props are the intersection between\n// the base navigator props (navgiation, screenProps, etc)\n// and the view's props\n\nconst defaultContentComponent = props => (\n  <ScrollView alwaysBounceVertical={false}>\n    <SafeAreaView forceInset={{ top: 'always', horizontal: 'never' }}>\n      <DrawerItems {...props} />\n    </SafeAreaView>\n  </ScrollView>\n);\n\nconst DefaultDrawerConfig = {\n  drawerWidth: () => {\n    /*\n     * Default drawer width is screen width - header height\n     * with a max width of 280 on mobile and 320 on tablet\n     * https://material.io/guidelines/patterns/navigation-drawer.html\n     */\n    const { height, width } = Dimensions.get('window');\n    const smallerAxisSize = Math.min(height, width);\n    const isLandscape = width > height;\n    const isTablet = smallerAxisSize >= 600;\n    const appBarHeight = Platform.OS === 'ios' ? (isLandscape ? 32 : 44) : 56;\n    const maxWidth = isTablet ? 320 : 280;\n\n    return Math.min(smallerAxisSize - appBarHeight, maxWidth);\n  },\n  contentComponent: defaultContentComponent,\n  drawerOpenRoute: 'DrawerOpen',\n  drawerCloseRoute: 'DrawerClose',\n  drawerToggleRoute: 'DrawerToggle',\n  drawerPosition: 'left',\n  drawerBackgroundColor: 'white',\n  useNativeAnimations: true,\n};\n\nconst DrawerNavigator = (routeConfigs, config = {}) => {\n  const mergedConfig = { ...DefaultDrawerConfig, ...config };\n  const {\n    containerConfig,\n    drawerWidth,\n    drawerLockMode,\n    contentComponent,\n    contentOptions,\n    drawerPosition,\n    useNativeAnimations,\n    drawerBackgroundColor,\n    drawerOpenRoute,\n    drawerCloseRoute,\n    drawerToggleRoute,\n    ...tabsConfig\n  } = mergedConfig;\n\n  const contentRouter = tabRouter(routeConfigs, tabsConfig);\n  const drawerRouter = tabRouter(\n    {\n      [drawerCloseRoute]: {\n        screen: createNavigator(contentRouter, routeConfigs, config)(props => (\n          <DrawerScreen {...props} />\n        )),\n      },\n      [drawerOpenRoute]: {\n        screen: () => null,\n      },\n      [drawerToggleRoute]: {\n        screen: () => null,\n      },\n    },\n    {\n      initialRouteName: drawerCloseRoute,\n    }\n  );\n\n  const navigator = createNavigator(drawerRouter, routeConfigs, config)(\n    props => (\n      <DrawerView\n        {...props}\n        drawerBackgroundColor={drawerBackgroundColor}\n        drawerLockMode={drawerLockMode}\n        useNativeAnimations={useNativeAnimations}\n        drawerWidth={drawerWidth}\n        contentComponent={contentComponent}\n        contentOptions={contentOptions}\n        drawerPosition={drawerPosition}\n        drawerOpenRoute={drawerOpenRoute}\n        drawerCloseRoute={drawerCloseRoute}\n        drawerToggleRoute={drawerToggleRoute}\n      />\n    )\n  );\n\n  return createNavigationContainer(navigator);\n};\n\nexport default DrawerNavigator;\n"]},"metadata":{},"sourceType":"module"}